@startuml

actor User
participant ":Appointment" as Appointment
participant ":NurseSchedException" as NurseSchedException
participant "apptList:ArrayList<Appointment>" as apptList
participant ":AppointmentStorage" as AppointmentStorage
participant "logr:Logger" as Logger

User -> Appointment : sortByImportance()
activate Appointment

Appointment -> apptList : isEmpty()
activate apptList
apptList --> Appointment : True / False
deactivate apptList

opt apptList is empty
    Appointment -> System.out : println("Appointment list is empty. Nothing to sort.")
    System.out --> User : display message

    Appointment -> Logger : log(WARNING, "Appointment list is empty. Nothing to sort.")
    activate Logger
    Logger --> Appointment
    deactivate Logger

    create NurseSchedException
    Appointment -> NurseSchedException : NurseSchedException(ExceptionMessage.INVALID_SORTING_LIST)
    activate NurseSchedException

    NurseSchedException -->[
    deactivate NurseSchedException
end

Appointment -> apptList : sort(Comparator)
activate apptList
note right of apptList
  1. Sort by importance (HIGH to LOW)
  2. Sort by date (earliest to latest)
  3. Sort by start time (earliest to latest)
end note
apptList --> Appointment
deactivate apptList

Appointment -> AppointmentStorage : overwriteSaveFile(apptList)
activate AppointmentStorage
AppointmentStorage -> FileWriter : write(formattedString)
activate FileWriter
FileWriter --> AppointmentStorage
deactivate FileWriter
AppointmentStorage --> Appointment
deactivate AppointmentStorage

Appointment -> System.out : println("Appointments sorted by importance level (HIGH to LOW).")
System.out --> User : display message

Appointment -> Logger : log(INFO, "Appointment list sorted by importance level")
activate Logger
Logger --> Appointment
deactivate Logger

Appointment --> User : return
deactivate Appointment

@enduml